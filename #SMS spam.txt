#SMS spam 
# Step 1: Import Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Step 2: Load Dataset
df = pd.read_csv("spam.csv", encoding='latin-1')
df = df[['v1', 'v2']]
df.columns = ['label', 'message']

# Step 3: Encode Labels
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Step 4: Split Data
X = df['message']
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: TF-IDF Vectorization
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Step 6: Train SVM Model
svm_model = LinearSVC()
svm_model.fit(X_train_tfidf, y_train)

# Step 7: Evaluate Model
y_pred = svm_model.predict(X_test_tfidf)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Step 8: Predict Custom SMS Message
def predict_sms(sms_text):
    vec = tfidf.transform([sms_text])
    pred = svm_model.predict(vec)
    return "Spam" if pred[0] == 1 else "Legit (Ham)"

# Try Custom Input
custom_sms = input("Enter your SMS message: ")
result = predict_sms(custom_sms)
print("\nüîç Result: The message is", result)
